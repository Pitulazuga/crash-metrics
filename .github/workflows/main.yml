# This is a basic workflow to help you get started with Actions

name: CI
      
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  #when there is a push to the master
#   push:
#     branches: [ master ]
  #when there is a pull to the master
#   pull_request:
#     branches: [ master ]
  # When manually triggered
  workflow_dispatch:
    inputs:
      dir:
        description: 'Choose the product category [benchmarking, driver-state, driving-behavior, location-intelligence, crashmetrics, or road-conditions]'
        required: false
        default: 'benchmarking'
      func:
        description: 'Choose a function to deploy'   
        required: true
        default: 'mileage'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    #does this mean that the files in my github repo are accessible by this YAML file?
    - uses: actions/checkout@v2
    
    #installs a version of python, but I need this if deploying to a severless Python Lambda?
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    #credentials to connect to AWS
    - name: Configure AWS credentials from Production account
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1
        profile_name: default
        runtime: python3.8
        s3_bucket: samcligit
    
    # Runs a set of commands using the runners shell; THIS DOESN'T WORK
    - name: Run a multi-line script
      working-directory: ${{ github.event.inputs.func }}
      run: |
         echo installing pip
         python -m pip install --upgrade pip
         echo installing requirements
         pip3 install -r requirements.txt -t .
         rm -rf numpy*
         rm -rf scipy*
         echo installed requirements without dependencies
         #zip files into current directory
         zip -r test-dep-dev.zip .  
         #ensuring current working directory is accessible by the function--this might not be doing anything
         export PATH=$PATH:$(pwd)
    
    #Deploy main.py to AWS
    - name: AWS Lambda Deploy
      uses: appleboy/lambda-action@v0.0.4
      with:
            #name of my AWS Lambda Function
            function_name: ${{ github.event.inputs.func }}
            #contains all the files in my github repository
            zip_file: ${{ github.event.inputs.func }}/test-dep-dev.zip
